[{"/Users/user/learn-js/react-learn-project/src/index.js":"1","/Users/user/learn-js/react-learn-project/src/App.js":"2","/Users/user/learn-js/react-learn-project/src/reportWebVitals.js":"3","/Users/user/learn-js/react-learn-project/src/components/Slider/Slider.js":"4","/Users/user/learn-js/react-learn-project/src/components/TabsContainer.js":"5","/Users/user/learn-js/react-learn-project/src/components/TabContent.js":"6","/Users/user/learn-js/react-learn-project/src/components/Tabs.js":"7","/Users/user/learn-js/react-learn-project/src/components/ChangeColorBtn.js":"8","/Users/user/learn-js/react-learn-project/src/components/Timerange/TimeRange.js":"9","/Users/user/learn-js/react-learn-project/src/components/RangeSlider/RangeSlider.js":"10","/Users/user/learn-js/react-learn-project/src/utils/convert.js":"11","/Users/user/learn-js/react-learn-project/src/components/Slider/Tooltip.js":"12","/Users/user/learn-js/react-learn-project/src/components/Slider/Scale.js":"13","/Users/user/learn-js/react-learn-project/src/pages/Home.js":"14","/Users/user/learn-js/react-learn-project/src/pages/CountryList.js":"15","/Users/user/learn-js/react-learn-project/src/components/Navigation/Navigation.js":"16","/Users/user/learn-js/react-learn-project/src/pages/SliderPage.js":"17","/Users/user/learn-js/react-learn-project/src/components/CustomCheckbox/CustomCheckbox.js":"18","/Users/user/learn-js/react-learn-project/src/pages/CountryListWithAPI.js":"19","/Users/user/learn-js/react-learn-project/src/pages/CountryListModified.js":"20","/Users/user/learn-js/react-learn-project/src/components/SearchInput/SearchInput.js":"21","/Users/user/learn-js/react-learn-project/src/components/SortingDropdown/SortingDropdown.js":"22","/Users/user/learn-js/react-learn-project/src/components/Toast/Toast.js":"23","/Users/user/learn-js/react-learn-project/src/context.js":"24","/Users/user/learn-js/react-learn-project/src/hooks/useSorting.js":"25"},{"size":655,"mtime":1631711638056,"results":"26","hashOfConfig":"27"},{"size":981,"mtime":1631693825428,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1627371999218,"results":"29","hashOfConfig":"27"},{"size":4600,"mtime":1628088610866,"results":"30","hashOfConfig":"27"},{"size":1853,"mtime":1628161150938,"results":"31","hashOfConfig":"27"},{"size":799,"mtime":1631631148220,"results":"32","hashOfConfig":"27"},{"size":626,"mtime":1627371999216,"results":"33","hashOfConfig":"27"},{"size":198,"mtime":1631625258125,"results":"34","hashOfConfig":"27"},{"size":1089,"mtime":1628163083462,"results":"35","hashOfConfig":"27"},{"size":2346,"mtime":1628162460726,"results":"36","hashOfConfig":"27"},{"size":999,"mtime":1628162957502,"results":"37","hashOfConfig":"27"},{"size":154,"mtime":1628084526854,"results":"38","hashOfConfig":"27"},{"size":252,"mtime":1628088106482,"results":"39","hashOfConfig":"27"},{"size":1105,"mtime":1631711592282,"results":"40","hashOfConfig":"27"},{"size":2563,"mtime":1631541895609,"results":"41","hashOfConfig":"27"},{"size":1045,"mtime":1631019885859,"results":"42","hashOfConfig":"27"},{"size":948,"mtime":1628160737877,"results":"43","hashOfConfig":"27"},{"size":575,"mtime":1629899406268,"results":"44","hashOfConfig":"27"},{"size":3939,"mtime":1631542066723,"results":"45","hashOfConfig":"27"},{"size":3369,"mtime":1632386582527,"results":"46","hashOfConfig":"27"},{"size":942,"mtime":1631541735979,"results":"47","hashOfConfig":"27"},{"size":603,"mtime":1632319288393,"results":"48","hashOfConfig":"27"},{"size":311,"mtime":1631631202531,"results":"49","hashOfConfig":"27"},{"size":99,"mtime":1631694105689,"results":"50","hashOfConfig":"27"},{"size":1029,"mtime":1632386353465,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"o0msb",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/user/learn-js/react-learn-project/src/index.js",[],["107","108"],"/Users/user/learn-js/react-learn-project/src/App.js",[],"/Users/user/learn-js/react-learn-project/src/reportWebVitals.js",[],"/Users/user/learn-js/react-learn-project/src/components/Slider/Slider.js",[],"/Users/user/learn-js/react-learn-project/src/components/TabsContainer.js",[],"/Users/user/learn-js/react-learn-project/src/components/TabContent.js",[],"/Users/user/learn-js/react-learn-project/src/components/Tabs.js",[],"/Users/user/learn-js/react-learn-project/src/components/ChangeColorBtn.js",[],"/Users/user/learn-js/react-learn-project/src/components/Timerange/TimeRange.js",[],"/Users/user/learn-js/react-learn-project/src/components/RangeSlider/RangeSlider.js",[],"/Users/user/learn-js/react-learn-project/src/utils/convert.js",[],"/Users/user/learn-js/react-learn-project/src/components/Slider/Tooltip.js",[],"/Users/user/learn-js/react-learn-project/src/components/Slider/Scale.js",[],"/Users/user/learn-js/react-learn-project/src/pages/Home.js",["109"],"import React, { useState } from \"react\";\nimport Navigation from \"../components/Navigation/Navigation\";\nimport CustomToast from \"../components/Toast/Toast\";\nimport { ToastContext } from \"../context\";\n\nconst Home = () => {\n  const [show, setShow] = useState(false);\n  // const message = useContext(ToastContext);\n  // return (\n  //   <ToastContext.Consumer> \n  //     { (message) => {\n  //       return <div className=\"container\">\n  //         <Navigation />\n  //         <h1>home page</h1>\n  //         <button className=\"btn btn-secondary mb-4\" onClick={() => setShow(true)}>\n  //           Show message\n  //         </button>\n  //         <CustomToast show={show} setShow={setShow} message={message} />\n  //       </div>\n\n  //     }}\n  //   </ToastContext.Consumer>\n  // );\n  return <div className=\"container\">\n          <Navigation />\n          <h1>home page</h1>\n          <button className=\"btn btn-secondary mb-4\" onClick={() => setShow(true)}>\n            Show message\n          </button>\n          <CustomToast show={show} setShow={setShow} message={'s'} />\n        </div>\n};\n\nexport default Home;\n","/Users/user/learn-js/react-learn-project/src/pages/CountryList.js",["110"],"import React, { useEffect, useState } from \"react\";\nimport CustomCheckbox from \"../components/CustomCheckbox/CustomCheckbox\";\nimport Navigation from \"../components/Navigation/Navigation\";\nimport SearchInput from \"../components/SearchInput/SearchInput\";\nimport data from \"../data/countries.json\";\nimport \"./style.scss\";\n\nconst CountryList = () => {\n  const [foundCountries, setFoundCountries] = useState(data);\n  const [checkedList, setCheckedList] = useState([]);\n  const [selected, setSelected] = useState(false);\n\n  const selectCountry = (countryCode) => {\n    return foundCountries.map((item) => {\n      if (countryCode === item.code && item.selected ) {\n        return {...item, selected: !item.selected}\n      }\n      if (countryCode === item.code ) {\n        return {...item, selected: !selected}\n      }\n      return item;\n    })\n  }\n\n  useEffect(() => {\n    setCheckedList(foundCountries.filter(country => country.selected));\n  }, [foundCountries]);\n\n  return (\n    <div className=\"container\">\n      <Navigation />\n      <div>\n        <h1>With additional flags</h1>\n        <div className=\"mb-5\">\n          <SearchInput foundItems={foundCountries} setFoundResult={setFoundCountries} />\n        </div>\n        <div className=\"row select-field\">\n          {foundCountries &&\n            (foundCountries?.length > 0 ? (\n              <div className=\"col\">\n                <p className=\"fw-bold\">Countries:</p>\n                {foundCountries.map((item, i) => {\n                  return (\n                    <div key={item.code} className={`list-item mb-2 ${foundCountries[i]?.hidden? 'hidden': ''}`}>\n                      <CustomCheckbox\n                        selected={foundCountries[i]?.selected}\n                        setSelected={() => setFoundCountries(selectCountry(item.code))}\n                      />\n                      <div className=\"ml-2\">\n                        {item?.name}\n                        </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"col\">No countries found</p>\n            ))}\n          <div className=\"col\">\n            <p className=\"fw-bold\">Selected Countries:</p>\n            <div>\n              {checkedList.map((item) => {\n                return (\n                  <div key={item.code} className=\"mb-2\">\n                    <div>{item.name}</div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CountryList;\n","/Users/user/learn-js/react-learn-project/src/components/Navigation/Navigation.js",[],"/Users/user/learn-js/react-learn-project/src/pages/SliderPage.js",[],"/Users/user/learn-js/react-learn-project/src/components/CustomCheckbox/CustomCheckbox.js",[],"/Users/user/learn-js/react-learn-project/src/pages/CountryListWithAPI.js",["111","112","113"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport CustomCheckbox from \"../components/CustomCheckbox/CustomCheckbox\";\nimport Navigation from \"../components/Navigation/Navigation\";\nimport \"./style.scss\";\n\nconst CountryListWithAPI = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [foundPersons, setFoundPersons] = useState(null);\n  const [checkedList, setCheckedList] = useState([]);\n  const [selectedInitial, setSelected] = useState(false);\n\n  useEffect(() => {\n    axios.get('https://swapi.dev/api/people')\n        .then(payload => {\n          const data = payload.data.results;\n          let formattedData = {};\n          for(let i = 0; i < data.length; i++) {\n            let id = data[i].name.toLowerCase().replace(/ +/g, \"\");\n            formattedData[id] = data[i];\n            formattedData[id].hidden = false;\n            formattedData[id].selected = false;\n          }\n          console.log('formattedData', formattedData);\n          setFoundPersons(formattedData);\n        })\n  }, []);\n\n  useEffect(() => {\n    const result = {};\n    if (searchTerm !== \"\") {\n      for(let key in foundPersons) {\n        result[key] = foundPersons[key];\n        if(!foundPersons[key].name.toLowerCase().includes(searchTerm.toLowerCase())) {\n          result[key].hidden = true;\n        } else {\n          result[key].hidden = false;\n        }\n      };\n      setFoundPersons(result);\n    } \n    else {\n      for(let key in foundPersons) {\n        result[key] = foundPersons[key];\n        result[key].hidden = false;\n      };\n      setFoundPersons(result); // need in case, when the keyWord word was deleted\n    }\n  }, [searchTerm]);\n\n  const selectPerson = (key) => {\n    let newObj = {...foundPersons};\n    newObj[key].selected = !foundPersons[key].selected;\n    return newObj;\n  }\n\n  useEffect(() => {\n    console.log(foundPersons);\n    let newCheckedList = {};\n    for (let key in foundPersons) {\n      if(foundPersons[key].selected) {\n        newCheckedList[key] = foundPersons[key];\n        console.log('newCheckedList', newCheckedList);\n        return newCheckedList;\n      }\n    }\n    setCheckedList(newCheckedList);\n  }, [foundPersons]);\n\n  return (\n    <div className=\"container\">\n      <Navigation />\n      <div>\n        <h1>With API</h1>\n        <div className=\"mb-5\">\n          <input type=\"search\" value={searchTerm} onChange={(e) => {setSearchTerm(e.target.value)}} />\n        </div>\n        <div className=\"row select-field\">\n          {(foundPersons ? (\n              <div className=\"col\">\n                <p className=\"fw-bold\">Countries:</p>\n                {Object.keys(foundPersons).map((item, i) => {\n                  return (\n                    <div key={item} className={`list-item mb-2 ${foundPersons[item].hidden ? 'hidden': ''}`}>\n                      <CustomCheckbox\n                        selected={foundPersons[item]?.selected}\n                        setSelected={() => setFoundPersons(selectPerson(item))}\n                      />\n                      <div className=\"ml-2\">\n                        {foundPersons[item].name}\n                        </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"col\">No countries found</p>\n            ))}\n          <div className=\"col\">\n            <p className=\"fw-bold\">Selected Countries:</p>\n                {checkedList &&\n              <div>\n                  {Object.keys(checkedList).map((item) => {\n                    console.log('checkedList', checkedList);\n                    return (\n                      <div key={item} className=\"mb-2\">\n                        <div>{checkedList[item].name}</div>\n                      </div>\n                    );\n                  })}\n\n              </div>\n                }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CountryListWithAPI;","/Users/user/learn-js/react-learn-project/src/pages/CountryListModified.js",["114","115"],"/Users/user/learn-js/react-learn-project/src/components/SearchInput/SearchInput.js",["116"],"import { useState, useEffect } from \"react\";\nimport \"./style.scss\";\n\nconst SearchInput = ({ foundItems, setFoundResult }) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    useEffect(() => {\n        if (searchTerm !== \"\") {\n          const result = foundItems.map((country) => {\n            if(!country.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n              return { ...country, hidden: true }\n            }\n            return { ...country, hidden: false}\n          });\n          setFoundResult(result);\n        } \n        else {\n          const data = foundItems.map(country => {\n            return { ...country, hidden: false }\n          })\n          setFoundResult(data); // need in case, when the keyWord word was deleted\n        }\n      }, [searchTerm]);\n\n    return (\n        <input type=\"search\" value={searchTerm} onChange={(e) => {setSearchTerm(e.target.value)}} />\n    );\n};\nexport default SearchInput;\n","/Users/user/learn-js/react-learn-project/src/components/SortingDropdown/SortingDropdown.js",[],"/Users/user/learn-js/react-learn-project/src/components/Toast/Toast.js",[],"/Users/user/learn-js/react-learn-project/src/context.js",[],"/Users/user/learn-js/react-learn-project/src/hooks/useSorting.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":22},{"ruleId":"121","severity":1,"message":"125","line":11,"column":20,"nodeType":"123","messageId":"124","endLine":11,"endColumn":31},{"ruleId":"121","severity":1,"message":"126","line":11,"column":10,"nodeType":"123","messageId":"124","endLine":11,"endColumn":25},{"ruleId":"121","severity":1,"message":"125","line":11,"column":27,"nodeType":"123","messageId":"124","endLine":11,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":49,"column":6,"nodeType":"129","endLine":49,"endColumn":18,"suggestions":"130"},{"ruleId":"121","severity":1,"message":"131","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"127","severity":1,"message":"132","line":27,"column":6,"nodeType":"129","endLine":27,"endColumn":23,"suggestions":"133"},{"ruleId":"127","severity":1,"message":"134","line":23,"column":10,"nodeType":"129","endLine":23,"endColumn":22,"suggestions":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'ToastContext' is defined but never used.","Identifier","unusedVar","'setSelected' is assigned a value but never used.","'selectedInitial' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'foundPersons'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'useEffect' is defined but never used.","React Hook useMemo has a missing dependency: 'foundCountries'. Either include it or remove the dependency array.",["139"],"React Hook useEffect has missing dependencies: 'foundItems' and 'setFoundResult'. Either include them or remove the dependency array. If 'setFoundResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["140"],"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [foundPersons, searchTerm]",{"range":"147","text":"148"},"Update the dependencies array to be: [foundCountries, keysOfCountries]",{"range":"149","text":"150"},"Update the dependencies array to be: [foundItems, searchTerm, setFoundResult]",{"range":"151","text":"152"},[1665,1677],"[foundPersons, searchTerm]",[1135,1152],"[foundCountries, keysOfCountries]",[774,786],"[foundItems, searchTerm, setFoundResult]"]